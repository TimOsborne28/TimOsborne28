[ExtensionOf(ClassStr(DocTMSCommercialInvoiceDSP))]
internal final class rsmDocTMSCommercialInvoiceDSP_Extension
{
    /// <summary>
    /// 19426 - 2022-11-15 FB
    /// </summary>
    /// <param name = "_recordBuilder">input</param>
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        next generateXmlDataSource(_recordBuilder);

        DocXmlRecord headerDataRecord;
        headerDataRecord = _recordBuilder.currentRecord();
      
        SalesLine salesLine;
        SalesTable salesTable = SalesTable::find(whsshipmentTable.orderNum);
        CustTable custTableInvoiceAcct = salesTable.custTable_InvoiceAccount();
        //WHSShipmentTable whsshipmenttable = whsshipmenttable::find(whsLoadTable.loadid);
        //whsShipmentTable whsshipmenttable;
        CustTable custTable = CustTable::find(salesTable.CustAccount);
        CustTable custTableInvoice = CustTable::find(custTable.InvoiceAccount);
        //CustInvoiceJour custInvoiceJour = CustInvoiceJour::findFromSalesId(salesTable.SalesId);
      
        // Add fields to the header
        CustInvoiceId TOinvoiceid;
        if (whsShipmentTable.rsmSmead_CINVid != '')
        {
        TOinvoiceid = whsShipmentTable.rsmSmead_CINVid;
        }

        else
        {
        numberseq numberseq;
        NumberSequenceReference numberSequenceReference = NumberSeqReference::findReference(extendedTypeNum(rsmSmead_CINVId));
        NumberSequenceTable numberSequenceTable  = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);
        numberseq = numberseq::newGetNumFromId(NumberSequenceTable.RecId);
        TOinvoiceid = numberseq.num();
        ttsbegin;
            whsShipmentTable tmpshipmenttable = whsShipmentTable::find(whsShipmentTable.shipmentid, true);
            tmpshipmenttable.rsmSmead_CINVid = TOinvoiceid;
            tmpshipmenttable.update();
        ttscommit;

        }
        

        headerDataRecord.addCalculatedField('BillToAddress', custTableInvoiceAcct.invoiceAddress().Address);
        //headerDataRecord.addCalculatedField('SoldToAddress',custTable.invoiceAddress().Address);
        headerDataRecord.addCalculatedField('SoldToAddress', DirParty::getPostalAddressByType(custTable.Party, LogisticsLocationRoleType::Delivery));
        headerDataRecord.addCalculatedField('ShipToAddressRSM', salesTable.deliveryAddress().Address);

        //address name fields
        headerDataRecord.addCalculatedField('BillToName', LogisticsLocation::find(custTableInvoice.invoiceAddress().Location).Description);
        headerDataRecord.addCalculatedField('SoldToName', DirParty::location(custTable.Party, LogisticsLocationRoleType::Delivery).parmLocationDescription());
        headerDataRecord.addCalculatedField('ShiptoName', LogisticsLocation::find(salesTable.deliveryaddress().Location).Description);
         
        headerDataRecord.addCalculatedField('TrackingNumber',whsshipmenttable.ProNum,literalStr('@rsmSmead_19426_Labels:TrackingNumber'));
        headerDataRecord.addCalculatedField('Carrier',whsshipmenttable.CarrierCode,literalStr('@TRX331'));
       
        CustInvoiceJour custInvoiceJour = CustInvoiceJour::findFromSalesId(salesTable.SalesId);
        headerDataRecord.addCalculatedField('PaymentId',CustInvoiceJour.paymId,literalStr('@SYS11443'));
        headerDataRecord.addCalculatedField('InvoiceId',TOinvoiceid,literalStr('@SYS12128'));
        //headerDataRecord.addCalculatedField('InvoiceDate',CustInvoiceJour.InvoiceDate,literalStr('@SYS57610'));
        headerDataRecord.addCalculatedField('InvoiceDate', salesTable.ShippingDateConfirmed,literalStr('@SYS57610'));
        //headerDataRecord.addCalculatedField('PurchaseOrder',CustInvoiceJour.PurchaseOrder,literalStr('@rsmSmead_19426_Labels:PurchaseOrder'));
        headerDataRecord.addCalculatedField('PurchaseOrder',salesTable.PurchOrderFormNum,literalStr('@rsmSmead_19426_Labels:PurchaseOrder'));
        headerDataRecord.addCalculatedField('DueDate',CustInvoiceJour.DueDate,literalStr('@SYS14021'));
        headerDataRecord.addCalculatedField('NetAmount',CustInvoiceJour.netAmount(),literalStr('@SYS6901'));
        headerDataRecord.addCalculatedField('SalesTaxAmt',custInvoiceJour.SumTax,literalStr('@SYS5878'));
        headerDataRecord.addCalculatedField('RoundOff',custInvoiceJour.InvoiceRoundOff,literalStr('@SYS8172'));
    }

    /// <summary>
    /// 19426 - 2022-11-15 FB
    /// </summary>
    /// <param name = "_addingRecord">input</param>
    /// <param name = "_rdpTableRecord">input</param>
    /// <param name = "_rdpTableName">input</param>
    protected void addDataFieldsForRdpTableRecord(DocXmlRecord _addingRecord, Common _rdpTableRecord, TableName _rdpTableName)
    {
        next addDataFieldsForRdpTableRecord(_addingRecord,_rdpTableRecord,_rdpTableName);

        if (_rdpTableName == tableStr(TMSCommercialInvoiceTmp))
        {
            TMSCommercialInvoiceTmp tmsCommercialInvoiceTmp = _rdpTableRecord;
         
            // Add fields to the lines
       
            SalesLine salesLine = SalesLine::findRecId(tmsCommercialInvoiceTmp.SalesLineRecId_DR);
            _addingRecord.addCalculatedField('ExtItemNumber', salesLine.ExternalItemId,literalStr('@SYS14552'));
            _addingRecord.addCalculatedField('CountryRegionId', salesLine.OrigCountryRegionId,literalStr('@SYS7437'));
            _addingRecord.addCalculatedField('HSTCode',WHSEcoResProductTransportationCodes::findByItemId(salesLine.ItemId).HarmonizedCode,literalStr('@WAX:HarmonizedTariffSchedule'));
            _addingRecord.addCalculatedField('DiscountAmt',salesLine.LineDisc,literalStr('@SYS11829'));
            _addingRecord.addCalculatedField('DiscountPct',salesLine.LinePercent ,literalStr('@SYS7813'));
            _addingRecord.addCalculatedField('SubTotal',salesLine.LineAmount ,literalStr('@SYS6928'));
            _addingRecord.addCalculatedField('Total',salesLine.LineAmount-salesLine.discAmount() ,literalStr('@SYS9242'));
            _addingRecord.addCalculatedField('ItemNameDesc',salesLine.itemName(),literalStr('@rsmSmead_19426_Labels:Description'));

            SalesTable salesTable = salesLine.salesTable();
            CustTable custTableInvoiceAcct = salesTable.custTable_InvoiceAccount();
            CustTable custTable = CustTable::find(salesTable.CustAccount);
           
            // Add Extension fields defined on TMSCommercialInvoiceTmp, if any.
            // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
            // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
            DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(tmsCommercialInvoiceTmp, _addingRecord, true, extensionFieldsMetadata_TMSCommercialInvoiceTmp);
          
        }
       
    }

}
